1. AIPO（全域营销中对消费者的分层：A（认知）I（兴趣）P（购买）L（忠诚））


2. 时间管理：24小时中的“三八理论”，由三个八小时组合，一个用于工作 一个用于睡觉 另一个就是成长的时候，是人跟人拉开差距的地方。



3.SOLID
这是一个缩写，指的是：

S：单一功能原则 (The Single Responsibility Principle)
O：开闭原则 (The Open/Closed Principle)
L：里氏替换原则 (The Liskov Substitution Principle)
I：接口隔离原则 (The Interface Segregation Principle)
D：依赖反转原则 (The Dependency Inversion Principle)
这些是 Object-Oriented Programming 的关键原则。诸如此类的设计原则能够帮助开发人员构建更易于维护的系统。

单一功能原则 (The Single Responsibility Principle)
英文维基百科
中文维基百科
每个模块或者类只应该有一项功能。

SOLID 的第一个原则。这个原则表明模块或者类只应该做一件事。实际上，这意味着对程序功能的单个小更改，应该只需要更改一个组件。例如，更改密码验证复杂性的方式应该只需要更改程序的一部分。

理论上讲，这使代码更健壮，更容易更改。知道正在更改的组件只有一个功能，这意味着测试更改更容易。使用前面的例子，更改密码复杂性组件应该只影响与密码复杂性相关的功能。变更具有许多功能的组件可能要困难得多。

参见：

Object-Orientated Programming
SOLID
开闭原则 (The Open/Closed Principle)
英文维基百科
中文维基百科
实体应开放扩展并关闭修改。

SOLID 的第二个原则。这个原则指出实体（可以是类、模块、函数等）应该能够使它们的行为易于扩展，但是它们的扩展行为不应该被修改。

举一个假设的例子，想象一个能够将 Markdown 转换为 HTML 的模块。如果可以扩展模块，而不修改内部模块来处理新的 markdown 特征，而无需修改内部模块，则可以认为是开放扩展。如果用户不能修改处理现有 Markdown 特征的模块，那么它被认为是关闭修改。

这个原则与面向对象编程紧密相关，让我们可以设计对象以便于扩展，但是可以避免以意想不到的方式改变其现有对象的行为。

参见：

Object-Orientated Programming
SOLID
里氏替换原则 (The Liskov Substitution Principle)
英文维基百科
中文维基百科
可以在不破坏系统的情况下，用子类型替换类型。

SOLID 的第三个原则。该原则指出，如果组件依赖于类型，那么它应该能够使用该类型的子类型，而不会导致系统失败或者必须知道该子类型的详细信息。

举个例子，假设我们有一个方法，读取 XML 文档。如果该方法使用基类型 file，则从 file 派生的任何内容，都能用在该方法中。 如果 file 支持反向查找，并且 xml 解析器使用该函数，但是派生类型 network file 尝试反向查找时失败，则 network file 将违反该原则。

该原则与面向对象编程紧密相关，必须仔细建模、层次结构，以避免混淆系统用户。

参见：

Object-Orientated Programming
SOLID
接口隔离原则 (The Interface Segregation Principle)
英文维基百科
中文维基百科
不应强制任何客户端依赖于它不使用的方法。

SOLID 的第四个原则。该原则指出组件的消费者不应该依赖于它实际上不使用的组件函数。

举一个例子，假设我们有一个方法，读取 XML 文档。它只需要读取文件中的字节，向前移动或向后移动。如果由于文件结构不相关（例如更新文件安全性的权限模型），需要更新此方法，则该原则已失效。文件最好实现 可查询流 接口，并让 XML 读取器使用该接口。

该原则与面向对象编程紧密相关，其中接口，层次结构和抽象类型用于不同组件的 minimise the coupling。 Duck typing 是一种通过消除显式接口来强制执行该原则的方法。

参见：

Object-Orientated Programming
SOLID
Duck Typing
Decoupling
依赖反转原则 (The Dependency Inversion Principle)
英文维基百科
中文维基百科
高级模块不应该依赖于低级实现。

SOLID 的第五个原则。该原则指出，更高级别的协调组件不应该知道其依赖项的详细信息。

举个例子，假设我们有一个从网站读取元数据的程序。我们假设主要组件必须知道下载网页内容的组件，以及可以读取元数据的组件。如果我们考虑依赖反转，主要组件将仅依赖于可以获取字节数据的抽象组件，然后是一个能够从字节流中读取元数据的抽象组件，主要组件不需要了解 TCP、IP、HTTP、HTML 等。

这个原则很复杂，因为它似乎可以反转系统的预期依赖性（因此得名）。实践中，这也意味着，单独的编排组件必须确保抽象类型的正确实现被使用（例如在前面的例子中，必须提供元数据读取器组件、HTTP 文件下载功能和 HTML 元标签读取器）。然后，这涉及诸如 Inversion of Control 和 Dependency Injection 之类的模式。

参见：

Object-Orientated Programming
SOLID
Inversion of Control
Dependency Injection

4. NFC与RFID
   第一、NFC将非接触读卡器、非接触卡和点对点功能整合进一块单芯片，
   而rfid必须有阅读器和标签组成。
   RFID只能实现信息的读取以及判定，而NFC技术则强调的是信息交互。
   通俗的说NFC就是RFID的演进版本，双方可以近距离交换信息。
   NFC手机内置NFC芯片，组成RFID模块的一部分，可以当作RFID无源标签使用进行支付费用；
   也可以当作RFID读写器，用作数据交换与采集，还可以进行NFC手机之间的数据通信。
   
   NFC的最大数据传输量 424 kbit/s 远小于 Bluetooth V2.1 (2.1 Mbit/s)。
   虽然NFC在传输速度与距离比不上蓝牙 (小于 20 cm)，但相应可以减少不必要的干扰。
   这让NFC特别适用于设备密集而传输变得困难的时候。
